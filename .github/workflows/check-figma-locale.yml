name: check-figma-locale

on:
  workflow_dispatch: {}
  schedule:
    - cron: "*/30 * * * *"   # 每30分钟（UTC）

permissions:
  contents: write
  issues: write

jobs:
  check:
    runs-on: ubuntu-latest
    env:
      # 读取“上次”的链接（你刚创建的仓库变量）
      PREVIOUS_URL: ${{ vars.LATEST_URL }}
      # ERE 兼容正则（去掉了 (?:...)）
      REGEX: 'https:\/\/www\.figma\.com\/webpack-artifacts\/assets\/figma_app(_beta)?-[a-f0-9]+\.min\.en\.json(\.br)?'
      # 如需自定义扫描页面，可在仓库“环境变量 Variables”里设置 PAGES，否则用下面默认
      PAGES: ${{ vars.PAGES }}
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: 安装必要的命令行工具
        shell: bash
        run: |
          set -euo pipefail
          missing=()
          command -v gh >/dev/null 2>&1 || missing+=(gh)
          command -v brotli >/dev/null 2>&1 || missing+=(brotli)
          if [[ ${#missing[@]} -gt 0 ]]; then
            sudo apt-get update
            sudo apt-get install -y "${missing[@]}"
          fi

      - name: 检测最新语言包链接
        id: detect
        shell: bash
        run: |
          set -euo pipefail

          log(){ printf '[%s] %s\n' "$(date +%H:%M:%S)" "$*" >&2; }

          # 默认待扫页面（可用仓库变量 PAGES 覆盖，空格分隔）
          if [[ -z "${PAGES:-}" ]]; then
            PAGES="https://www.figma.com/ https://www.figma.com/login https://www.figma.com/ja/"
          fi

          tmp_dir="$(mktemp -d)"
          trap 'rm -rf "$tmp_dir"' EXIT

          combined="$tmp_dir/all.html"
          : > "$combined"
          for u in ${PAGES}; do
            log "抓取页面: $u"
            curl -fsSL "$u" | tr -d '\n' >> "$combined"
            echo >> "$combined"
          done

          declare -A PATTERNS
          PATTERNS[figma_app]="${REGEX}"
          PATTERNS[auth_iframe]='https:\/\/www\.figma\.com\/webpack-artifacts\/assets\/auth_iframe-[a-f0-9]+\.min\.en\.json(\.br)?'
          PATTERNS[community]='https:\/\/www\.figma\.com\/webpack-artifacts\/assets\/community-[a-f0-9]+\.min\.en\.json(\.br)?'

          declare -A FOUND
          for key in "${!PATTERNS[@]}"; do
            match_file="$tmp_dir/${key}.txt"
            grep -oE "${PATTERNS[$key]}" "$combined" | awk 'NF' | sort -u | tail -n1 > "$match_file" || true
            if [[ -s "$match_file" ]]; then
              value="$(cat "$match_file")"
              FOUND[$key]="$value"
              log "${key} 最新地址: $value"
              echo "${key}=$value" >> "$GITHUB_OUTPUT"
            else
              log "${key} 未找到匹配链接"
              echo "${key}=" >> "$GITHUB_OUTPUT"
            fi
          done

          latest_found="${FOUND[figma_app]:-}"
          echo "found=${latest_found}" >> "$GITHUB_OUTPUT"

          if [[ -z "$latest_found" ]]; then
            log "未找到 figma_app 对应的链接"
            echo "changed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [[ -n "${PREVIOUS_URL:-}" && "$latest_found" == "$PREVIOUS_URL" ]]; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true"  >> "$GITHUB_OUTPUT"
          fi

      - name: 下载最新语言包文件
        shell: bash
        run: |
          set -euo pipefail

          download_and_extract() {
            local name="$1"
            local url="$2"
            local dest="$3"

            if [[ -z "$url" ]]; then
              echo "[$name] 跳过：未检测到链接"
              return 0
            fi

            echo "[$name] 下载中: $url"
            local tmp
            tmp="$(mktemp)"
            if ! curl -fsSL "$url" -o "$tmp"; then
              echo "::error::下载 $name ($url) 失败"
              return 1
            fi

            mkdir -p "$(dirname "$dest")"

            if [[ "$url" == *.br ]]; then
              local decompressed
              decompressed="$(mktemp)"
              brotli -d "$tmp" -o "$decompressed"
              mv "$decompressed" "$dest"
              rm -f "$tmp"
            else
              mv "$tmp" "$dest"
            fi
          }

          download_and_extract figma_app "${{ steps.detect.outputs.figma_app }}" "lang/en_latest.json"
          download_and_extract auth_iframe "${{ steps.detect.outputs.auth_iframe }}" "lang/auth_iframe-en.json"
          download_and_extract community "${{ steps.detect.outputs.community }}" "lang/community-en.json"

      - name: 重建格式化语言包
        shell: bash
        run: |
          set -euo pipefail

          if [[ -f lang/en_latest.json ]]; then
            python3 tools/format_json.py -i lang/en_latest.json -o lang/en_latest+.json
          fi

          format_in_place() {
            local path="$1"
            if [[ ! -f "$path" ]]; then
              return
            fi
            local tmp
            tmp="$(mktemp)"
            python3 tools/format_json.py -i "$path" -o "$tmp"
            mv "$tmp" "$path"
          }

          format_in_place lang/auth_iframe-en.json
          format_in_place lang/community-en.json

      - name: 提交语言包更新
        shell: bash
        env:
          TARGET_BRANCH: ${{ github.ref_name }}
        run: |
          set -euo pipefail

          git status --short

          if git diff --quiet -- lang/en_latest.json lang/en_latest+.json lang/auth_iframe-en.json lang/community-en.json; then
            echo "没有检测到语言包变化"
            exit 0
          fi

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add lang/en_latest.json lang/en_latest+.json lang/auth_iframe-en.json lang/community-en.json

          git commit -m "chore: update figma locale assets"

          # 避免竞争条件
          branch="${TARGET_BRANCH:-$(git rev-parse --abbrev-ref HEAD)}"
          git pull --rebase origin "$branch"
          git push origin "HEAD:$branch"

      - name: 更新仓库变量 LATEST_URL（仅在变化时）
        if: steps.detect.outputs.changed == 'true' && steps.detect.outputs.found != ''
        shell: bash
        env:
          PAT_TOKEN: ${{ secrets.VARS_TOKEN }}   # 你的 PAT（repo + actions）
        run: |
          set -euo pipefail
          if [[ -z "${PAT_TOKEN:-}" ]]; then
            echo "::warning::未设置 VARS_TOKEN，无法更新仓库变量"
            exit 0
          fi

          owner_repo="${GITHUB_REPOSITORY}"
          var_name="LATEST_URL"
          new_value="${{ steps.detect.outputs.found }}"

          echo "正在更新仓库变量 ${var_name}："
          echo "$new_value"

          # 变量是否存在？先 GET 再决定 PATCH 还是 PUT（两者都能更新，这里使用 PATCH）
          # Docs: PATCH /repos/{owner}/{repo}/actions/variables/{name}
          curl -s -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${PAT_TOKEN}" \
            "https://api.github.com/repos/${owner_repo}/actions/variables/${var_name}" \
            -d "$(jq -nc --arg v "$new_value" '{ value: $v }')"

          echo "变量已更新"

      - name: 语言包更新时创建 Issue 通知
        if: steps.detect.outputs.changed == 'true' && steps.detect.outputs.found != ''
        env:
          GH_TOKEN: ${{ github.token }}   # 默认 token，够发 Issue
        shell: bash
        run: |
          set -euo pipefail
          title="Figma 英文语言包已更新"
          body=$(printf '%s\n' \
            '检测到新的 Figma 英文语言包链接。' \
            '' \
            '**最新链接**' \
            '```' \
            "${{ steps.detect.outputs.found }}" \
            '```' \
            '' \
            '**上一版链接**' \
            '```' \
            "${PREVIOUS_URL}" \
            '```' \
            '' \
            '**检测时间**' \
            "$(date -u +"%Y-%m-%d %H:%M:%S UTC")" \
            '' \
            '_本 Issue 由 **check-figma-locale** 工作流自动创建。_' \
          )
          gh api --method POST -H "Accept: application/vnd.github+json" \
            "/repos/${GITHUB_REPOSITORY}/issues" \
            -f title="$title" -f body="$body" >/dev/null
          echo "已创建 Issue 通知"

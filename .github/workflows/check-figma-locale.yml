name: check-figma-locale

on:
  workflow_dispatch: {}
  schedule:
    - cron: "*/30 * * * *"   # 每30分钟（UTC）

permissions:
  contents: write
  issues: write

jobs:
  check:
    runs-on: ubuntu-latest
    env:
      # 读取“上次”的链接（你刚创建的仓库变量）
      PREVIOUS_URL: ${{ vars.LATEST_URL }}
      # ERE 兼容正则（去掉了 (?:...)）
      REGEX: 'https:\/\/www\.figma\.com\/webpack-artifacts\/assets\/figma_app(_beta)?-[a-f0-9]+\.min\.en\.json(\.br)?'
      # 如需自定义扫描页面，可在仓库“环境变量 Variables”里设置 PAGES，否则用下面默认
      PAGES: ${{ vars.PAGES }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Ensure gh is available
        run: |
          if ! command -v gh >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y gh
          fi

      - name: Detect latest en asset
        id: detect
        shell: bash
        run: |
          set -euo pipefail

          log(){ printf '[%s] %s\n' "$(date +%H:%M:%S)" "$*" >&2; }

          # 默认待扫页面（可用仓库变量 PAGES 覆盖，空格分隔）
          if [[ -z "${PAGES:-}" ]]; then
            PAGES="https://www.figma.com/ https://www.figma.com/login https://www.figma.com/ja/"
          fi

          tmp_matches="$(mktemp)"
          trap 'rm -f "$tmp_matches"' EXIT

          for u in ${PAGES}; do
            log "Fetch: $u"
            curl -fsSL "$u" | tr -d '\n' | grep -oE "$REGEX" || true
          done | awk 'NF' | sort -u | tail -n1 > "$tmp_matches"

          if [[ ! -s "$tmp_matches" ]]; then
            log "No matches found."
            echo "found=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          latest_found="$(cat "$tmp_matches")"
          log "Latest: $latest_found"

          echo "found=$latest_found" >> "$GITHUB_OUTPUT"

          # 比对
          if [[ -n "${PREVIOUS_URL:-}" && "$latest_found" == "$PREVIOUS_URL" ]]; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true"  >> "$GITHUB_OUTPUT"
          fi

      - name: Update repo variable LATEST_URL (when changed)
        if: steps.detect.outputs.changed == 'true' && steps.detect.outputs.found != ''
        shell: bash
        env:
          PAT_TOKEN: ${{ secrets.VARS_TOKEN }}   # 你的 PAT（repo + actions）
        run: |
          set -euo pipefail
          if [[ -z "${PAT_TOKEN:-}" ]]; then
            echo "::warning::VARS_TOKEN not set; cannot update repository variable."
            exit 0
          fi

          owner_repo="${GITHUB_REPOSITORY}"
          var_name="LATEST_URL"
          new_value="${{ steps.detect.outputs.found }}"

          echo "Updating repo variable ${var_name} to:"
          echo "$new_value"

          # 变量是否存在？先 GET 再决定 PATCH 还是 PUT（两者都能更新，这里使用 PATCH）
          # Docs: PATCH /repos/{owner}/{repo}/actions/variables/{name}
          curl -s -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${PAT_TOKEN}" \
            "https://api.github.com/repos/${owner_repo}/actions/variables/${var_name}" \
            -d "$(jq -nc --arg v "$new_value" '{ value: $v }')"

          echo "Updated."

      - name: Notify by creating an Issue (when changed)
        if: steps.detect.outputs.changed == 'true' && steps.detect.outputs.found != ''
        env:
          GH_TOKEN: ${{ github.token }}   # 默认 token，够发 Issue
        shell: bash
        run: |
          set -euo pipefail
          title="Figma en locale asset updated"
          body=$(
            cat <<EOF
Detected a new Figma English locale asset.

**URL**
\`\`\`
${{ steps.detect.outputs.found }}
\`\`\`

**Previous**
\`\`\`
${PREVIOUS_URL}
\`\`\`

**Time**
$(date -u +"%Y-%m-%d %H:%M:%S UTC")

_This issue is auto-generated by **check-figma-locale**._
EOF
          )
          gh api --method POST -H "Accept: application/vnd.github+json" \
            "/repos/${GITHUB_REPOSITORY}/issues" \
            -f title="$title" -f body="$body" >/dev/null
          echo "Issue created."
